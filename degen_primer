#!/usr/bin/python
#
# Copyright (C) 2012 Allis Tauri <allista@gmail.com>
# 
# degen_primer is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# degen_primer is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.
'''
Created on Jun 19, 2012

Tool to compute degenerate primer parameters using BioPython

@author: Allis Tauri <allista@gmail.com>
'''

from DegenPrimer.DegenPrimerConfig import DegenPrimerConfig
from DegenPrimer.DegenPrimerConfigCLI import DegenPrimerConfigCLI
from DegenPrimer.Pipeline import Pipeline
from DegenPrimer.AnalysisTask import AnalysisTask
from DegenPrimer.OptimizationTask import OptimizationTask
from BioUtils.Tools.Text import hr, wrap_text
from BioUtils.Tools.Multiprocessing import MPMain
###############################################################################

class DP_Main(MPMain):
    def _main(self):
        #initialize pipeline
        pipeline = Pipeline(self.abort_event)
        pipeline.register_task(OptimizationTask(self.abort_event))
        pipeline.register_task(AnalysisTask(self.abort_event))
        #get commandline arguments
        args = DegenPrimerConfigCLI()
        try:
            #parse command line arguments and/or configuration file
            args.parse_configuration()
        except ValueError, e:
            #if not in batch mode, consider incorrect values as errors
            if not args.batch():
                print e.message
                return 1
            #in batch mode all values except do_blast flag are ignored anyway
            else: pass
        print
        if not args.batch(): #single analysis mode
            return pipeline.run(args)
        #batch analysis mode
        print wrap_text('Batch mode enabled. All command-line arguments '
                        'except "--do-blast" are discarded.\n')
        exit_code = 0
        for config_file in args.config_files:
            if self.abort_event.is_set(): break
            config = DegenPrimerConfig()
            try:
                config.parse_configuration(config_file)
            except ValueError, e:
                print '\nUnable to perform analysis with the set of values given in "%s"' % config_file
                print e.message
                continue
            config.do_blast = args.do_blast
            print hr(' Repeating analysis for %s ' % config_file)
            exit_code |= pipeline.run(config)
            print hr('')
        return exit_code

if __name__ == '__main__':
    DP_Main(run=True)