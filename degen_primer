#!/usr/bin/python
#
# Copyright (C) 2012 Allis Tauri <allista@gmail.com>
# 
# degen_primer is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# indicator_gddccontrol is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.
'''
Created on Jun 19, 2012

Tool to compute degenerate primer parameters using BioPython

@author: Allis Tauri <allista@gmail.com>
'''

#imports
import sys
import signal
from DegenPrimer.StringTools import hr, wrap_text
from DegenPrimer.DegenPrimerConfig import DegenPrimerConfig
from DegenPrimer.DegenPrimerConfigCLI import DegenPrimerConfigCLI
from DegenPrimer.DegenPrimerPipeline import DegenPrimerPipeline
###############################################################################

#pipeline object
degen_primer_pipeline = DegenPrimerPipeline()

def sig_handler(signal, frame):
    degen_primer_pipeline.terminate()
    sys.exit(1)


if __name__ == '__main__':
    #setup signal handler
    signal.signal(signal.SIGINT,  sig_handler)
    signal.signal(signal.SIGTERM, sig_handler)
    signal.signal(signal.SIGQUIT, sig_handler)
    ###
    args = DegenPrimerConfigCLI()
    try:
        #parse command line arguments and/or configuration file
        args.parse_configuration()
    except ValueError, e:
        #if not in batch mode, consider incorrect values as errors
        if not args.batch():
            print e.message
            sys.exit(1)
        #in batch mode all values except do_blast flag are ignored anyway
        else: pass
    
    print ''
    if not args.batch():
        #single analysis mode
        sys.exit(degen_primer_pipeline.run(args))
    else:
        #batch analysis mode
        print wrap_text('Batch mode enabled. All command-line arguments '
                        'except "--do-blast" are discarded.\n')
        return_code = 0
        for config_file in args.config_files:
            config = DegenPrimerConfig()
            try:
                config.parse_configuration(config_file)
            except ValueError, e:
                print '\nUnable to perform analysis with the set of values given in "%s"' % config_file
                print e.message
                continue
            config.do_blast = args.do_blast
            print hr(' Repeating analysis for %s ' % config_file)
            return_code |= degen_primer_pipeline.run(config)
            print hr('')
        sys.exit(return_code)