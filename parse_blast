#!/usr/bin/python
# coding=utf-8
#
# Copyright (C) 2012 Allis Tauri <allista@gmail.com>
# 
# degen_primer is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# indicator_gddccontrol is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.
'''
Created on Jun 23, 2012

parse_blast â€” which parses previously saved blast xml output and produses human 
readable report. The original NCBI BLAST txt reports are more informative though.

@author: Allis Tauri <allista@gmail.com>
'''    

#imports
import sys
import argparse
from DegenPrimer.Blast import Blast


#parse command line arguments
parser = argparse.ArgumentParser(description='Parse blast results in xml format and write human readable report.')
parser.add_argument('blast_results', metavar='filename.xml',
                    type=str, nargs='+',
                    help='File with blast results in xml format')
#in silica PCR
iPCR_group = parser.add_argument_group('BLAST results filtration and in silica PCR simulation')
iPCR_group.add_argument('--min-amplicon', metavar='bp', 
                    required=False, type=int, default=50,
                    help='Minimum amplicon size (default 50)')
iPCR_group.add_argument('--max-amplicon', metavar='bp', 
                    required=False, type=int, default=3000,
                    help='Maximum amplicon size (default 3000)')
iPCR_group.add_argument('--hsp-dG', metavar='kcal/mol', 
                            required=False, type=float, default=-10.0,   
                            help='HSPs with free energy ABOVE this threshold '
                            'will be considered unstable, not yielding PCR products '
                            '(default -10 kcal/mol).')
iPCR_group.add_argument('--no-exonuclease', default=False, 
                    required=False, action='store_true', 
                    help="Set this flag if you are planning to use a "
                    "DNA-polymerase without 3'-5'-exonuclease activity.")
args = parser.parse_args()


for blast_result in args.blast_results:
    #set job_id
    xml_filename = blast_result
    if   xml_filename.rfind('-blast.xml'): 
        job_id = xml_filename[0:xml_filename.rfind('-blast.xml')]
    elif xml_filename.rfind('.xml'): 
        job_id = xml_filename[0:xml_filename.rfind('.xml')]
    else: job_id = xml_filename

    #parse blast results
    #init blast object
    blast = Blast(job_id)
    #load blast results
    blast.load_results()
    #report results in human readable form
    blast.write_hits_report(args.hsp_dG, 
                            args.no_exonuclease)
    blast.write_PCR_report(args.min_amplicon, 
                           args.max_amplicon, 
                           args.hsp_dG, 
                           args.no_exonuclease)
###
sys.exit(0)