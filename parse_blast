#!/usr/bin/python
# coding=utf-8
#
# Copyright (C) 2012 Allis Tauri <allista@gmail.com>
# 
# indicator_gddccontrol is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# indicator_gddccontrol is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.
'''
Created on Jun 23, 2012

parse_blast â€” which parses previously saved blast xml output and produses human 
readable report. The original NCBI BLAST txt reports are more informative though.

@author: Allis Tauri <allista@gmail.com>
'''    

#imports
import sys
import argparse
try:
    from Bio.Blast import NCBIXML
except:
    print "The BioPython must be installed in your system for this script to work."
    sys.exit(1)

from DegenPrimer.Blast import Blast
from DegenPrimer.StringTools import print_exception

#parse command line arguments
parser = argparse.ArgumentParser(description='Parse blast results in xml format and write human readable report.')
parser.add_argument('blast_results', metavar='filename.xml',
                    type=str, nargs='+',
                    help='File with blast results in xml format')
parser.add_argument('--top-hits', dest='top_hits', metavar='N',
                    required=False, type=int, default=10,
                    help='Number of top hits to include in the report')
parser.add_argument('--top-hsps', dest='top_hsps', metavar='N',
                    required=False, type=int, default=4,
                    help='Number of top HSPs of each hit to include in the report')
args = parser.parse_args()


for blast_result in args.blast_results:
    #set filenames
    xml_filename = blast_result
    if   xml_filename.rfind('-blast.xml'): 
        job_id = xml_filename[0:xml_filename.rfind('-blast.xml')]
    elif xml_filename.rfind('.xml'): 
        job_id = xml_filename[0:xml_filename.rfind('.xml')]
    else: job_id = xml_filename

    #parse results
    try:
        results_file = open(xml_filename, 'r')
        blast_results = list(NCBIXML.parse(results_file))
    except Exception, e:
        print 'parse_blast.parse results:'
        print_exception(e)
        sys.exit(1)
    results_file.close()

    #report results in human readable form
    blast = Blast(job_id, blast_results)
    blast.write_blast_report(args.top_hits, args.top_hsps)

sys.exit(0)